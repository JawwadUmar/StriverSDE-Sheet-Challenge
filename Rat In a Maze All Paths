#include <bits/stdc++.h>

bool isSafe(int r, int c, vector<vector<int>> &maze, vector<vector<int>> &vis){
  int n = maze.size();
  
  if(r>=0 && r<n && c>=0 && c<n && vis[r][c] ==0 && maze[r][c] ==1){
    return true;
  }
  
  return false;
}

void dfs(int row, int col, vector<int> &temp, vector<vector<int>> &maze, vector<vector<int>> &vis, vector<vector<int>> &res){
  int n = maze.size();

  if(row ==n-1 && col ==n-1){
    res.push_back(temp);
    return;
}

vector<int> delrow = {0,0,1,-1};
vector<int> delcol = {1,-1,0,0};

for(int i=0; i<4; i++){
  int nrow = row+ delrow[i];
  int ncol = col+ delcol[i];

  if (isSafe(nrow, ncol,maze, vis)) {
    vis[nrow][ncol] = 1;
    temp[n*nrow + ncol] = 1;
    
    dfs(nrow, ncol, temp, maze, vis, res);

    vis[nrow][ncol] = 0;
    temp[n*nrow + ncol] = 0;
  }
}
}

vector<vector<int>> ratInAMaze(vector<vector<int> > &maze, int n){
  
  vector<vector<int>> vis(n, vector<int> (n, 0));
  vector<vector<int>> res;
  vector<int> temp (n*n , 0);

  if(maze[0][0] ==0){
    return res;
  }
  
  vis[0][0] = 1;
  temp[0] = 1;
  
  dfs(0, 0, temp, maze, vis, res);

  return res;
}

