/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

vector<int> pre;
vector<int> in;
int n;
map<int, int> mp1;
map<int, int> mp2;


TreeNode* f(int preStart, int preEnd, int inStart, int inEnd){
    if(preStart > preEnd || inStart > inEnd){
        return NULL;
    }

    TreeNode* x = new TreeNode(pre[preStart]);
    int idx = mp1[pre[preStart]];
    int total_left = idx;
    int total_right = inEnd - idx;

    x->right = f(preStart + 1, preStart+ total_right, idx+1, inEnd);
    x->left  = f(preStart+ total_right+1, preEnd, inStart, idx-1);

    return x;

}

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        pre = postorder;
        reverse(pre.begin(), pre.end());
        in = inorder;
        n = in.size();

        for(int i=0; i<n; i++){
            mp1[in[i]] = i;
            mp2[pre[i]] = i;
        }

        return f(0, n-1, 0, n-1);
    }
};
