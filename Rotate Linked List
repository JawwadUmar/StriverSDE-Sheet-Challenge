/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */
Node* reverse(Node* head){
     if(head ==NULL || head->next ==NULL){
          return  head;
     }

     Node* prev = NULL;
     Node* curr = head;

     while(curr){
          Node* forward = curr->next;
          curr->next = prev;
          prev = curr;
          curr = forward;
     }

     return  prev;
}
Node *rotate(Node *head, int k) {
     // Write your code here.
     if(head ==NULL || head->next ==NULL || k==0){
          return  head;
     }
     int n = 0;
     Node* curr = head;
     while(curr){
          curr = curr->next;
          n++;
     }

     k = k%n;

     //reverse from 0 to n-k-1
     //reverse from n-k till end
     Node* dum = new Node(1);
     dum->next = head;
     Node* curr2 = dum;

     curr = head;
     int i = 0;
     while(i< n-k){
          curr = curr->next;
          i++;
          curr2 = curr2->next;
     }

     Node* a = reverse(curr);
     curr2->next = NULL;

     Node* b= reverse(head);

     curr = b;
     while(curr->next){
          curr = curr->next;
     }

     curr->next = a;

     Node* res = reverse(b);

     return  res;

}
