/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

 Node* f(Node* head, int k, int idx, int n){
    if(head ==NULL){
        return NULL;
    }

    if(idx+k > n){
        return head;
    }
    
    Node* forward  = NULL;
	Node* prev = NULL;
	Node* curr = head;
    int count = 0;

	while(curr!=NULL && count<k ){
		forward = curr->next;
        curr->next = prev;
        prev = curr;
        curr = forward;
        count++;
	}

    if(curr != NULL){
        head->next = f(forward, k, idx+k, n);
    }

    return  prev;
 }

Node* kReverse(Node* head, int k) {

    int cnt = 0;
    Node* curr = head;

    while(curr){
        curr = curr->next;
        cnt++;
    }

    //size of list is n
    return  f(head, k, 0, cnt);

}
