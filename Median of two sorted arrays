double median(vector<int>& a, vector<int>& b) {

    double res =0;
    int n1 = a.size();
    int n2 = b.size();

    if(n1>n2){
        return median(b, a);
    }

    int req = (n1+n2+1)/2;  //elements required on left half

    //elements that can be included from a
    int high = n1;
    int low = 0;

    while(high>=low){
        int cnt1 = (high+low)/2;  //no of element on left from a
        int cnt2 = req-cnt1; //no of element on left from b

        double l1, l2, r1, r2;
        //l1 --> largest element on left from first array a
        //l2 --> largest element on left from second array b
        //r1 --> smallest element on right from first array a
        //r2 --> smallest element on right from second array b

        l1 = cnt1 ==0 ? INT_MIN : a[cnt1-1];
        l2 = cnt2 ==0 ? INT_MIN : b[cnt2-1];
        r1 = cnt1==n1 ? INT_MAX : a[cnt1];
        r2 = cnt2==n2 ? INT_MAX : b[cnt2];

        if(l1<=r2 && l2<=r1){
            if((n1+n2)%2){
                return res= max(l1, l2);
            }

            else{
                return res= (max(l1,l2)+min(r1,r2))/2;
            }
        }

        else if(l1<r2){
            low = cnt1+1;
        }

        else{
            high = cnt1-1;
        }

    }

    return  res;

}
