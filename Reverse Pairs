#include <bits/stdc++.h>

// long long int cnt = 0;

void merge(long long int arr[], int low, int mid, int high)
    {
        
        vector<int> temp;
        int left = low;
        int right = mid+1;
        
        while(left <= mid && right<= high){
            if(arr[left]<= arr[right]){
                temp.push_back(arr[left]);
                left++;
            }
            
            else{
                temp.push_back(arr[right]);
                right++;
            }
        }
        
        while(left<= mid){
            temp.push_back(arr[left]);
            left++;
            
        }
        
        while(right<=high){
            temp.push_back(arr[right]);
                right++;
        }
        
        //Modify the array
        for(int i=low; i<=high; i++){
            arr[i]  = temp[i-low];
        }
        
    }

	int countPairs(long long int arr[], int low, int mid, int high){
		int cnt = 0;
		int right = mid+1;
		for(int left = low; left<=mid; left++){
			while(right<=high && arr[left]> 2*arr[right]){
				right++;
			}
			cnt+= (right - (mid+1));
		}
		return cnt;
	}
    
    
    
    int mergeSort(long long int arr[], int low, int high)
    {
		int cnt = 0;
        if(low ==high){
            return cnt;
        }
        
        int mid = (low+high)/2;
        cnt+=  mergeSort(arr, low, mid);
        cnt+= mergeSort(arr,mid+1, high);
		cnt+=countPairs(arr, low, mid, high);
        merge(arr, low, mid, high);
		return cnt;
        
    }
int reversePairs(vector<int> &a, int n){
	n = a.size();
    long long int arr[n];
	for(int i = 0; i<n; i++){
		arr[i] = a[i];
	}
	return mergeSort(arr, 0, n-1);
	// return cnt;	
}
