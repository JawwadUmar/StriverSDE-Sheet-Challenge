/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
typedef long long int ll;

    int widthOfBinaryTree(TreeNode* root) {

        queue<pair<TreeNode*, ll>> q;
        q.push({root, 1});

        int res = INT_MIN;

        while(q.empty()==false){
            ll n = q.size();
            
            ll firstIndex = q.front().second;
            ll lastIndex = q.back().second;

            res = max(res, (int)(lastIndex - firstIndex +1));


            for(int i=0; i<n; i++){
                auto it = q.front();

                TreeNode* node = it.first;
                ll idx = it.second - firstIndex;


                q.pop();

                if(node->left){
                    q.push({node->left, 2*idx+1});
                }

                if(node->right){
                    q.push({node->right, 2*idx+2});
                }
            }

        }

        return res;
    }
};
