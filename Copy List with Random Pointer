#include <bits/stdc++.h>

/*************************************************************

    Following is the LinkedListNode class structure

    template <typename T>   
    class LinkedListNode
    {
        public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode<T> *random;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*************************************************************/
void insert(LinkedListNode<int>* &head, LinkedListNode<int>* &tail, int d){
    LinkedListNode<int>* x = new LinkedListNode<int>(d);

    if(head ==NULL){
        head = x;
        tail = x;
        return;
    }

    tail->next = x;
    tail = x;
}
LinkedListNode<int> *cloneRandomList(LinkedListNode<int> *head)
{
    LinkedListNode<int>* cloneHead = NULL;
    LinkedListNode<int>* cloneTail = NULL;

    LinkedListNode<int>* curr = head;

    //simply copy
    while(curr){
        int d = curr->data;
        insert(cloneHead, cloneTail, d);
        curr = curr->next;
    }

    //rearrange the next pointers
    LinkedListNode<int>* curr1 = head;
    LinkedListNode<int>* curr2 = cloneHead;

    while(curr1){
        LinkedListNode<int>* aux = curr1->next;
        curr1->next = curr2;
        curr1 = aux;

        aux = curr2->next;
        curr2->next = curr1;
        curr2 = aux;

    }

    //point the random pointers
    curr1 = head;
    curr2 = cloneHead;

    while(curr1){
        if(curr1->next != NULL){
          if (curr1->random != NULL) {
            curr1->next->random = curr1->random->next;
          }

          else{
              curr1->next->random = curr1->random;
          }
        }

        curr1 = curr1->next->next;
    }

    //revert the pointers
    curr1 = head;
    curr2 = cloneHead;

    while(curr1 && curr2){
        curr1->next = curr2->next;
        curr1 = curr1->next;

        if (curr1) {
          curr2->next = curr1->next;
        }
        curr2 = curr2->next;
    }

    return cloneHead;
    
}
